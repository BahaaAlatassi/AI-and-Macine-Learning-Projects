This is apractical implementation of greedy best-first search and A* search.

The task is to get a robot to the other side of a room, avoiding two large obstacles on the way. 
A diagram of the state space is attached with this file. Each grey circle is a state, labelled A-H. 
Lines between states are the transitions and they are labelled with their step cost. 
Each state also has a number in brackets: this is the value of the heuristic function h(n) for that state.

The heuristic values are the number of steps to reach H assuming there are no obstacles, and given that the robot can only move in four directions. 
This heuristic is called the Manhattan distance. The Manhattan distance is an admissible and consistent heuristic for this problem.

The robot starts in state A, and the goal is to arrive at state H.

1- Apply Greedy Best-First Search (the Graph Search version) to this problem. Note down the frontier set at each step. Does it find the optimal solution in this case? If not, why not?

2- Apply A* Search (the Graph Search version) to this problem. Note down the frontier set at each step, and the f-cost (i.e. the value of the evaluation function) of each node. Does A* Search find a different solution?

3- Apply the Tree Search version of A* Search to this problem. With a tree search algorithm the frontier can contain multiple nodes with the same state (but usually different path costs).